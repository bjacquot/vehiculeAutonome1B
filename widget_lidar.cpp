#include "widget_lidar.h"

WidgetLIDAR::WidgetLIDAR(QWidget *parent)
{
    QString d("180;180;180;180;180;180;180;181;181;182;182;183;184;184;185;186;187;188;189;190;191;192;194;195;197;198;200;2286;2307;2329;2352;2376;2402;2429;2457;2487;2518;2550;2585;2621;2659;2699;2741;2774;2803;2826;2843;2857;2864;2869;665;656;647;638;630;622;615;608;601;594;588;583;577;572;567;562;558;554;550;546;542;539;536;533;530;527;525;523;521;519;517;516;515;574;669;805;804;803;803;802;802;802;803;803;804;805;669;574;515;516;517;519;521;523;525;527;530;533;536;539;542;546;550;554;558;562;567;572;577;583;588;594;601;608;615;622;630;638;647;656;665;868;851;835;820;806;792;779;767;777;793;810;828;847;867;889;912;936;962;990;1020;1051;1704;1762;1824;1892;1966;2047;2135;2232;2339;2457;2588;2736;2902;331;329;328;327;325;324;323;323;322;321;321;320;320;320;320;320;320;320;320;320;321;321;322;323;323;324;325;327;328;329;331;707;666;630;598;569;543;520;498;479;461;444;429;415;402;389;378;367;357;348;339;331;323;316;309;303;297;291;285;280;275;270;266;262;258;254;250;247;244;240;237;235;232;229;227;225;222;220;218;216;215;213;211;210;208;207;206;204;203;202;201;200;200;199;198;197;197;196;196;195;195;195;195;195;194;194;194;195;195;195;195;195;196;196;197;197;198;199;200;200;201;202;203;204;206;207;208;210;211;213;215;216;218;220;222;225;227;229;232;235;237;240;244;247;250;254;258;262;266;270;275;280;285;291;297;303;309;316;323;331;339;348;357;367;378;389;402;415;429;200;198;197;195;194;192;191;190;189;188;187;186;185;184;184;183;182;182;181;181;180;180;180;180;180;180");
    QStringList liste=d.split(';');
    for (int i=0;i<360;i++)
    {
        distances.at(i)=liste.at(i).toInt();
    }
}

void WidgetLIDAR::paintEvent(QPaintEvent *event)
{
    QPainter painter(this);
    painter.translate(width() / 2, height() / 2);
    painter.scale(0.2,0.2);


    // Maintenant, (0, 0) est au centre du widget
    painter.drawLine(-1000, 0, 1000, 0);  // Ligne horizontale passant par le centre
    painter.drawLine(0, -1000, 0, 1000);
    // Boucle pour dessiner 360 lignes (un rayon pour chaque degré)
    for (int angle = 0; angle < 360; ++angle) {
        // Convertir l'angle en radians
        double radians = angle * M_PI / 180.0;
        // Calculer les coordonnées du point à l'extrémité du rayon
        int x = static_cast<int>(distances[angle] * cos(radians));
        int y = static_cast<int>(distances[angle] * sin(radians));

        // Dessiner la ligne partant du centre (0,0) vers (x,y)
        painter.drawLine(0, 0, x, y);
    }
}
